
package org.sonar.plugins.modelbus.wsclient.repository;

/**
 * Please modify this class to meet your needs 
 * This class is not complete
 */

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import javax.annotation.Generated;
import javax.xml.namespace.QName;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;

/**
 * This class was generated by Apache CXF 2.6.1
 * 2012-11-17T17:52:26.504+01:00
 * Generated source version: 2.6.1
 * 
 */
@Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2012-11-17T17:52:26.504+01:00", comments = "Apache CXF 2.6.1")
public final class Repository_RepositoryPort_Client {

    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2012-11-17T17:52:26.504+01:00")
    private static final QName SERVICE_NAME = new QName("http://www.modelbus.org/Repository/", "RepositoryServiceService");

    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2012-11-17T17:52:26.504+01:00")
    private Repository_RepositoryPort_Client() {
    }

    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "2012-11-17T17:52:26.504+01:00")
    public static void main(String args[]) throws java.lang.Exception {
        URL wsdlURL = RepositoryServiceService.WSDL_LOCATION;
        if (args.length > 0 && args[0] != null && !"".equals(args[0])) { 
            File wsdlFile = new File(args[0]);
            try {
                if (wsdlFile.exists()) {
                    wsdlURL = wsdlFile.toURI().toURL();
                } else {
                    wsdlURL = new URL(args[0]);
                }
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
        }
      
        RepositoryServiceService ss = new RepositoryServiceService(wsdlURL, SERVICE_NAME);
        Repository port = ss.getRepositoryPort();  
        
        {
        System.out.println("Invoking checkOutModelWithRevision...");
        org.sonar.plugins.modelbus.wsclient.repository.Session _checkOutModelWithRevision_sessionVal = null;
        javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session> _checkOutModelWithRevision_session = new javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session>(_checkOutModelWithRevision_sessionVal);
        java.lang.String _checkOutModelWithRevision_modelUri = "";
        javax.xml.ws.Holder<byte[]> _checkOutModelWithRevision_model = new javax.xml.ws.Holder<byte[]>();
        long _checkOutModelWithRevision_revision = 0;
        try {
            port.checkOutModelWithRevision(_checkOutModelWithRevision_session, _checkOutModelWithRevision_modelUri, _checkOutModelWithRevision_model, _checkOutModelWithRevision_revision);

            System.out.println("checkOutModelWithRevision._checkOutModelWithRevision_session=" + _checkOutModelWithRevision_session.value);
            System.out.println("checkOutModelWithRevision._checkOutModelWithRevision_model=" + _checkOutModelWithRevision_model.value);
        } catch (UnresolvedReferencesException e) { 
            System.out.println("Expected exception: UnresolvedReferencesException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryRuntimeException e) { 
            System.out.println("Expected exception: RepositoryRuntimeException has occurred.");
            System.out.println(e.toString());
        } catch (NonExistingResourceException e) { 
            System.out.println("Expected exception: NonExistingResourceException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryAuthentificationException e) { 
            System.out.println("Expected exception: RepositoryAuthentificationException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking control...");
        org.sonar.plugins.modelbus.wsclient.repository.Session _control_session = null;
        java.lang.String _control_fragmentUri = "";
        java.lang.String _control_fragmentFileLocation = "";
        java.lang.String _control_logMessage = "";
        try {
            boolean _control__return = port.control(_control_session, _control_fragmentUri, _control_fragmentFileLocation, _control_logMessage);
            System.out.println("control.result=" + _control__return);

        } catch (NonExistingResourceException e) { 
            System.out.println("Expected exception: NonExistingResourceException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryRuntimeException e) { 
            System.out.println("Expected exception: RepositoryRuntimeException has occurred.");
            System.out.println(e.toString());
        } catch (LockedException e) { 
            System.out.println("Expected exception: LockedException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryAuthentificationException e) { 
            System.out.println("Expected exception: RepositoryAuthentificationException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking checkInModel...");
        org.sonar.plugins.modelbus.wsclient.repository.Session _checkInModel_sessionVal = null;
        javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session> _checkInModel_session = new javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session>(_checkInModel_sessionVal);
        java.lang.String _checkInModel_modelUri = "";
        byte[] _checkInModel_model = new byte[0];
        boolean _checkInModel_enableDependencies = false;
        java.lang.String _checkInModel_logMessage = "";
        javax.xml.ws.Holder<java.lang.String> _checkInModel_checksum = new javax.xml.ws.Holder<java.lang.String>();
        try {
            port.checkInModel(_checkInModel_session, _checkInModel_modelUri, _checkInModel_model, _checkInModel_enableDependencies, _checkInModel_logMessage, _checkInModel_checksum);

            System.out.println("checkInModel._checkInModel_session=" + _checkInModel_session.value);
            System.out.println("checkInModel._checkInModel_checksum=" + _checkInModel_checksum.value);
        } catch (UnresolvedReferencesException e) { 
            System.out.println("Expected exception: UnresolvedReferencesException has occurred.");
            System.out.println(e.toString());
        } catch (InvalidValueException e) { 
            System.out.println("Expected exception: InvalidValueException has occurred.");
            System.out.println(e.toString());
        } catch (ConstraintViolationException e) { 
            System.out.println("Expected exception: ConstraintViolationException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryRuntimeException e) { 
            System.out.println("Expected exception: RepositoryRuntimeException has occurred.");
            System.out.println(e.toString());
        } catch (LockedException e) { 
            System.out.println("Expected exception: LockedException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryAuthentificationException e) { 
            System.out.println("Expected exception: RepositoryAuthentificationException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking checkInFile...");
        org.sonar.plugins.modelbus.wsclient.repository.Session _checkInFile_sessionVal = null;
        javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session> _checkInFile_session = new javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session>(_checkInFile_sessionVal);
        java.lang.String _checkInFile_fileUri = "";
        byte[] _checkInFile_fileContent = new byte[0];
        java.lang.String _checkInFile_logMessage = "";
        javax.xml.ws.Holder<java.lang.String> _checkInFile_checksum = new javax.xml.ws.Holder<java.lang.String>();
        try {
            port.checkInFile(_checkInFile_session, _checkInFile_fileUri, _checkInFile_fileContent, _checkInFile_logMessage, _checkInFile_checksum);

            System.out.println("checkInFile._checkInFile_session=" + _checkInFile_session.value);
            System.out.println("checkInFile._checkInFile_checksum=" + _checkInFile_checksum.value);
        } catch (InvalidValueException e) { 
            System.out.println("Expected exception: InvalidValueException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryRuntimeException e) { 
            System.out.println("Expected exception: RepositoryRuntimeException has occurred.");
            System.out.println(e.toString());
        } catch (LockedException e) { 
            System.out.println("Expected exception: LockedException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryAuthentificationException e) { 
            System.out.println("Expected exception: RepositoryAuthentificationException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking unpublishService...");
        org.sonar.plugins.modelbus.wsclient.repository.Session _unpublishService_session = null;
        org.sonar.plugins.modelbus.wsclient.repository.ServiceProperties _unpublishService_properties = null;
        try {
            boolean _unpublishService__return = port.unpublishService(_unpublishService_session, _unpublishService_properties);
            System.out.println("unpublishService.result=" + _unpublishService__return);

        } catch (RepositoryRuntimeException e) { 
            System.out.println("Expected exception: RepositoryRuntimeException has occurred.");
            System.out.println(e.toString());
        } catch (InvalidServiceDescriptionException e) { 
            System.out.println("Expected exception: InvalidServiceDescriptionException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryAuthentificationException e) { 
            System.out.println("Expected exception: RepositoryAuthentificationException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking commitChangeModel...");
        org.sonar.plugins.modelbus.wsclient.repository.Session _commitChangeModel_sessionVal = null;
        javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session> _commitChangeModel_session = new javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session>(_commitChangeModel_sessionVal);
        java.lang.String _commitChangeModel_messageID = "";
        java.lang.String _commitChangeModel_modelUri = "";
        byte[] _commitChangeModel_changeModelContent = new byte[0];
        javax.xml.ws.Holder<java.lang.Boolean> _commitChangeModel_successful = new javax.xml.ws.Holder<java.lang.Boolean>();
        try {
            port.commitChangeModel(_commitChangeModel_session, _commitChangeModel_messageID, _commitChangeModel_modelUri, _commitChangeModel_changeModelContent, _commitChangeModel_successful);

            System.out.println("commitChangeModel._commitChangeModel_session=" + _commitChangeModel_session.value);
            System.out.println("commitChangeModel._commitChangeModel_successful=" + _commitChangeModel_successful.value);
        } catch (InvalidValueException e) { 
            System.out.println("Expected exception: InvalidValueException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryRuntimeException e) { 
            System.out.println("Expected exception: RepositoryRuntimeException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryAuthentificationException e) { 
            System.out.println("Expected exception: RepositoryAuthentificationException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking lock...");
        org.sonar.plugins.modelbus.wsclient.repository.Session _lock_session = null;
        java.lang.String _lock_uri = "";
        java.lang.Object _lock_timeout = new java.lang.Object();
        try {
            boolean _lock__return = port.lock(_lock_session, _lock_uri, _lock_timeout);
            System.out.println("lock.result=" + _lock__return);

        } catch (InvalidValueException e) { 
            System.out.println("Expected exception: InvalidValueException has occurred.");
            System.out.println(e.toString());
        } catch (NonExistingResourceException e) { 
            System.out.println("Expected exception: NonExistingResourceException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryRuntimeException e) { 
            System.out.println("Expected exception: RepositoryRuntimeException has occurred.");
            System.out.println(e.toString());
        } catch (LockedException e) { 
            System.out.println("Expected exception: LockedException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryAuthentificationException e) { 
            System.out.println("Expected exception: RepositoryAuthentificationException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking authenticate...");
        java.lang.String _authenticate_username = "";
        java.lang.String _authenticate_password = "";
        try {
            java.lang.String _authenticate__return = port.authenticate(_authenticate_username, _authenticate_password);
            System.out.println("authenticate.result=" + _authenticate__return);

        } catch (InvalidValueException e) { 
            System.out.println("Expected exception: InvalidValueException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryRuntimeException e) { 
            System.out.println("Expected exception: RepositoryRuntimeException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking checkOutFile...");
        org.sonar.plugins.modelbus.wsclient.repository.Session _checkOutFile_sessionVal = null;
        javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session> _checkOutFile_session = new javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session>(_checkOutFile_sessionVal);
        java.lang.String _checkOutFile_fileUri = "";
        long _checkOutFile_revision = 0;
        javax.xml.ws.Holder<byte[]> _checkOutFile_fileContent = new javax.xml.ws.Holder<byte[]>();
        try {
            port.checkOutFile(_checkOutFile_session, _checkOutFile_fileUri, _checkOutFile_revision, _checkOutFile_fileContent);

            System.out.println("checkOutFile._checkOutFile_session=" + _checkOutFile_session.value);
            System.out.println("checkOutFile._checkOutFile_fileContent=" + _checkOutFile_fileContent.value);
        } catch (RepositoryRuntimeException e) { 
            System.out.println("Expected exception: RepositoryRuntimeException has occurred.");
            System.out.println(e.toString());
        } catch (NonExistingResourceException e) { 
            System.out.println("Expected exception: NonExistingResourceException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryAuthentificationException e) { 
            System.out.println("Expected exception: RepositoryAuthentificationException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking checkOutModel...");
        org.sonar.plugins.modelbus.wsclient.repository.Session _checkOutModel_sessionVal = null;
        javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session> _checkOutModel_session = new javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session>(_checkOutModel_sessionVal);
        java.lang.String _checkOutModel_modelUri = "";
        javax.xml.ws.Holder<byte[]> _checkOutModel_model = new javax.xml.ws.Holder<byte[]>();
        try {
            port.checkOutModel(_checkOutModel_session, _checkOutModel_modelUri, _checkOutModel_model);

            System.out.println("checkOutModel._checkOutModel_session=" + _checkOutModel_session.value);
            System.out.println("checkOutModel._checkOutModel_model=" + _checkOutModel_model.value);
        } catch (UnresolvedReferencesException e) { 
            System.out.println("Expected exception: UnresolvedReferencesException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryRuntimeException e) { 
            System.out.println("Expected exception: RepositoryRuntimeException has occurred.");
            System.out.println(e.toString());
        } catch (NonExistingResourceException e) { 
            System.out.println("Expected exception: NonExistingResourceException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryAuthentificationException e) { 
            System.out.println("Expected exception: RepositoryAuthentificationException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking getIncomingReferences...");
        org.sonar.plugins.modelbus.wsclient.repository.Session _getIncomingReferences_session = null;
        java.lang.String _getIncomingReferences_uri = "";
        try {
            org.sonar.plugins.modelbus.wsclient.repository.IncomingReferencesInfoArray _getIncomingReferences__return = port.getIncomingReferences(_getIncomingReferences_session, _getIncomingReferences_uri);
            System.out.println("getIncomingReferences.result=" + _getIncomingReferences__return);

        } catch (RepositoryRuntimeException e) { 
            System.out.println("Expected exception: RepositoryRuntimeException has occurred.");
            System.out.println(e.toString());
        } catch (NonExistingResourceException e) { 
            System.out.println("Expected exception: NonExistingResourceException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryAuthentificationException e) { 
            System.out.println("Expected exception: RepositoryAuthentificationException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking uncontrol...");
        org.sonar.plugins.modelbus.wsclient.repository.Session _uncontrol_session = null;
        java.lang.String _uncontrol_fragmentFileLocation = "";
        java.lang.String _uncontrol_logMessage = "";
        try {
            boolean _uncontrol__return = port.uncontrol(_uncontrol_session, _uncontrol_fragmentFileLocation, _uncontrol_logMessage);
            System.out.println("uncontrol.result=" + _uncontrol__return);

        } catch (NonExistingResourceException e) { 
            System.out.println("Expected exception: NonExistingResourceException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryRuntimeException e) { 
            System.out.println("Expected exception: RepositoryRuntimeException has occurred.");
            System.out.println(e.toString());
        } catch (LockedException e) { 
            System.out.println("Expected exception: LockedException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryAuthentificationException e) { 
            System.out.println("Expected exception: RepositoryAuthentificationException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking createModelwithContent...");
        org.sonar.plugins.modelbus.wsclient.repository.Session _createModelwithContent_sessionVal = null;
        javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session> _createModelwithContent_session = new javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session>(_createModelwithContent_sessionVal);
        byte[] _createModelwithContent_initialModelContent = new byte[0];
        java.lang.String _createModelwithContent_modelUri = "";
        boolean _createModelwithContent_enableDependencies = false;
        java.lang.String _createModelwithContent_logMessage = "";
        javax.xml.ws.Holder<java.lang.String> _createModelwithContent_checksum = new javax.xml.ws.Holder<java.lang.String>();
        try {
            port.createModelwithContent(_createModelwithContent_session, _createModelwithContent_initialModelContent, _createModelwithContent_modelUri, _createModelwithContent_enableDependencies, _createModelwithContent_logMessage, _createModelwithContent_checksum);

            System.out.println("createModelwithContent._createModelwithContent_session=" + _createModelwithContent_session.value);
            System.out.println("createModelwithContent._createModelwithContent_checksum=" + _createModelwithContent_checksum.value);
        } catch (UnresolvedReferencesException e) { 
            System.out.println("Expected exception: UnresolvedReferencesException has occurred.");
            System.out.println(e.toString());
        } catch (InvalidValueException e) { 
            System.out.println("Expected exception: InvalidValueException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryRuntimeException e) { 
            System.out.println("Expected exception: RepositoryRuntimeException has occurred.");
            System.out.println(e.toString());
        } catch (ConstraintViolationException e) { 
            System.out.println("Expected exception: ConstraintViolationException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryAuthentificationException e) { 
            System.out.println("Expected exception: RepositoryAuthentificationException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking delete...");
        org.sonar.plugins.modelbus.wsclient.repository.Session _delete_sessionVal = null;
        javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session> _delete_session = new javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session>(_delete_sessionVal);
        java.lang.String _delete_uri = "";
        java.lang.String _delete_logMessage = "";
        long _delete_revision = 0;
        javax.xml.ws.Holder<java.lang.String> _delete_result = new javax.xml.ws.Holder<java.lang.String>();
        try {
            port.delete(_delete_session, _delete_uri, _delete_logMessage, _delete_revision, _delete_result);

            System.out.println("delete._delete_session=" + _delete_session.value);
            System.out.println("delete._delete_result=" + _delete_result.value);
        } catch (NonExistingResourceException e) { 
            System.out.println("Expected exception: NonExistingResourceException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryRuntimeException e) { 
            System.out.println("Expected exception: RepositoryRuntimeException has occurred.");
            System.out.println(e.toString());
        } catch (LockedException e) { 
            System.out.println("Expected exception: LockedException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryAuthentificationException e) { 
            System.out.println("Expected exception: RepositoryAuthentificationException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking createModel...");
        org.sonar.plugins.modelbus.wsclient.repository.Session _createModel_sessionVal = null;
        javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session> _createModel_session = new javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session>(_createModel_sessionVal);
        java.lang.String _createModel_modelUri = "";
        java.lang.String _createModel_metamodelUri = "";
        java.lang.String _createModel_logMessage = "";
        javax.xml.ws.Holder<byte[]> _createModel_model = new javax.xml.ws.Holder<byte[]>();
        try {
            port.createModel(_createModel_session, _createModel_modelUri, _createModel_metamodelUri, _createModel_logMessage, _createModel_model);

            System.out.println("createModel._createModel_session=" + _createModel_session.value);
            System.out.println("createModel._createModel_model=" + _createModel_model.value);
        } catch (UnresolvedReferencesException e) { 
            System.out.println("Expected exception: UnresolvedReferencesException has occurred.");
            System.out.println(e.toString());
        } catch (InvalidValueException e) { 
            System.out.println("Expected exception: InvalidValueException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryRuntimeException e) { 
            System.out.println("Expected exception: RepositoryRuntimeException has occurred.");
            System.out.println(e.toString());
        } catch (ConstraintViolationException e) { 
            System.out.println("Expected exception: ConstraintViolationException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryAuthentificationException e) { 
            System.out.println("Expected exception: RepositoryAuthentificationException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking createDir...");
        org.sonar.plugins.modelbus.wsclient.repository.Session _createDir_sessionVal = null;
        javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session> _createDir_session = new javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session>(_createDir_sessionVal);
        java.lang.String _createDir_dirUri = "";
        java.lang.String _createDir_logMessage = "";
        javax.xml.ws.Holder<java.lang.String> _createDir_checksum = new javax.xml.ws.Holder<java.lang.String>();
        try {
            port.createDir(_createDir_session, _createDir_dirUri, _createDir_logMessage, _createDir_checksum);

            System.out.println("createDir._createDir_session=" + _createDir_session.value);
            System.out.println("createDir._createDir_checksum=" + _createDir_checksum.value);
        } catch (RepositoryRuntimeException e) { 
            System.out.println("Expected exception: RepositoryRuntimeException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryAuthentificationException e) { 
            System.out.println("Expected exception: RepositoryAuthentificationException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking publishService...");
        org.sonar.plugins.modelbus.wsclient.repository.Session _publishService_session = null;
        org.sonar.plugins.modelbus.wsclient.repository.ServiceProperties _publishService_properties = null;
        try {
            boolean _publishService__return = port.publishService(_publishService_session, _publishService_properties);
            System.out.println("publishService.result=" + _publishService__return);

        } catch (RepositoryRuntimeException e) { 
            System.out.println("Expected exception: RepositoryRuntimeException has occurred.");
            System.out.println(e.toString());
        } catch (InvalidServiceDescriptionException e) { 
            System.out.println("Expected exception: InvalidServiceDescriptionException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryAuthentificationException e) { 
            System.out.println("Expected exception: RepositoryAuthentificationException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking commit...");
        org.sonar.plugins.modelbus.wsclient.repository.Session _commit_sessionVal = null;
        javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session> _commit_session = new javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session>(_commit_sessionVal);
        org.sonar.plugins.modelbus.wsclient.repository.PathFileContentMapEntryArray _commit_createFileMap = null;
        org.sonar.plugins.modelbus.wsclient.repository.PathFileContentMapEntryArray _commit_checkInFileMap = null;
        net.java.dev.jaxb.array.StringArray _commit_folderPaths = null;
        net.java.dev.jaxb.array.StringArray _commit_deletionPaths = null;
        java.lang.String _commit_logMessage = "";
        javax.xml.ws.Holder<java.lang.String> _commit_checksum = new javax.xml.ws.Holder<java.lang.String>();
        try {
            port.commit(_commit_session, _commit_createFileMap, _commit_checkInFileMap, _commit_folderPaths, _commit_deletionPaths, _commit_logMessage, _commit_checksum);

            System.out.println("commit._commit_session=" + _commit_session.value);
            System.out.println("commit._commit_checksum=" + _commit_checksum.value);
        } catch (InvalidValueException e) { 
            System.out.println("Expected exception: InvalidValueException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryRuntimeException e) { 
            System.out.println("Expected exception: RepositoryRuntimeException has occurred.");
            System.out.println(e.toString());
        } catch (LockedException e) { 
            System.out.println("Expected exception: LockedException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryAuthentificationException e) { 
            System.out.println("Expected exception: RepositoryAuthentificationException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking unlock...");
        org.sonar.plugins.modelbus.wsclient.repository.Session _unlock_session = null;
        java.lang.String _unlock_uri = "";
        try {
            boolean _unlock__return = port.unlock(_unlock_session, _unlock_uri);
            System.out.println("unlock.result=" + _unlock__return);

        } catch (NonExistingResourceException e) { 
            System.out.println("Expected exception: NonExistingResourceException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryRuntimeException e) { 
            System.out.println("Expected exception: RepositoryRuntimeException has occurred.");
            System.out.println(e.toString());
        } catch (LockedException e) { 
            System.out.println("Expected exception: LockedException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryAuthentificationException e) { 
            System.out.println("Expected exception: RepositoryAuthentificationException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking getDir...");
        org.sonar.plugins.modelbus.wsclient.repository.Session _getDir_sessionVal = null;
        javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session> _getDir_session = new javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session>(_getDir_sessionVal);
        java.lang.String _getDir_uri = "";
        long _getDir_revision = 0;
        boolean _getDir_includeCommitMessages = false;
        javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.RepositoryDirEntryArray> _getDir_entries = new javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.RepositoryDirEntryArray>();
        javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.RepositoryDirEntry> _getDir_entry = new javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.RepositoryDirEntry>();
        try {
            port.getDir(_getDir_session, _getDir_uri, _getDir_revision, _getDir_includeCommitMessages, _getDir_entries, _getDir_entry);

            System.out.println("getDir._getDir_session=" + _getDir_session.value);
            System.out.println("getDir._getDir_entries=" + _getDir_entries.value);
            System.out.println("getDir._getDir_entry=" + _getDir_entry.value);
        } catch (InvalidRevisionException e) { 
            System.out.println("Expected exception: InvalidRevisionException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryRuntimeException e) { 
            System.out.println("Expected exception: RepositoryRuntimeException has occurred.");
            System.out.println(e.toString());
        } catch (NonExistingResourceException e) { 
            System.out.println("Expected exception: NonExistingResourceException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryAuthentificationException e) { 
            System.out.println("Expected exception: RepositoryAuthentificationException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking createFile...");
        org.sonar.plugins.modelbus.wsclient.repository.Session _createFile_sessionVal = null;
        javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session> _createFile_session = new javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session>(_createFile_sessionVal);
        java.lang.String _createFile_fileUri = "";
        byte[] _createFile_initialFileContent = new byte[0];
        java.lang.String _createFile_logMessage = "";
        javax.xml.ws.Holder<java.lang.String> _createFile_checksum = new javax.xml.ws.Holder<java.lang.String>();
        try {
            port.createFile(_createFile_session, _createFile_fileUri, _createFile_initialFileContent, _createFile_logMessage, _createFile_checksum);

            System.out.println("createFile._createFile_session=" + _createFile_session.value);
            System.out.println("createFile._createFile_checksum=" + _createFile_checksum.value);
        } catch (InvalidValueException e) { 
            System.out.println("Expected exception: InvalidValueException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryRuntimeException e) { 
            System.out.println("Expected exception: RepositoryRuntimeException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryAuthentificationException e) { 
            System.out.println("Expected exception: RepositoryAuthentificationException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking checkPath...");
        org.sonar.plugins.modelbus.wsclient.repository.Session _checkPath_sessionVal = null;
        javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session> _checkPath_session = new javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session>(_checkPath_sessionVal);
        java.lang.String _checkPath_uri = "";
        long _checkPath_revision = 0;
        javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.RepositoryNodeKind> _checkPath_nodeKind = new javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.RepositoryNodeKind>();
        try {
            port.checkPath(_checkPath_session, _checkPath_uri, _checkPath_revision, _checkPath_nodeKind);

            System.out.println("checkPath._checkPath_session=" + _checkPath_session.value);
            System.out.println("checkPath._checkPath_nodeKind=" + _checkPath_nodeKind.value);
        } catch (RepositoryRuntimeException e) { 
            System.out.println("Expected exception: RepositoryRuntimeException has occurred.");
            System.out.println(e.toString());
        } catch (NonExistingResourceException e) { 
            System.out.println("Expected exception: NonExistingResourceException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryAuthentificationException e) { 
            System.out.println("Expected exception: RepositoryAuthentificationException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking getStatus...");
        org.sonar.plugins.modelbus.wsclient.repository.Session _getStatus_session = null;
        boolean _getStatus_includeServices = false;
        javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.ServiceStatusArray> _getStatus_serviceStatus = new javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.ServiceStatusArray>();
        javax.xml.ws.Holder<java.lang.Object> _getStatus_startupDate = new javax.xml.ws.Holder<java.lang.Object>();
        javax.xml.ws.Holder<java.lang.String> _getStatus_location = new javax.xml.ws.Holder<java.lang.String>();
        javax.xml.ws.Holder<java.lang.String> _getStatus_secureLocation = new javax.xml.ws.Holder<java.lang.String>();
        try {
            port.getStatus(_getStatus_session, _getStatus_includeServices, _getStatus_serviceStatus, _getStatus_startupDate, _getStatus_location, _getStatus_secureLocation);

            System.out.println("getStatus._getStatus_serviceStatus=" + _getStatus_serviceStatus.value);
            System.out.println("getStatus._getStatus_startupDate=" + _getStatus_startupDate.value);
            System.out.println("getStatus._getStatus_location=" + _getStatus_location.value);
            System.out.println("getStatus._getStatus_secureLocation=" + _getStatus_secureLocation.value);
        } catch (RepositoryRuntimeException e) { 
            System.out.println("Expected exception: RepositoryRuntimeException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryAuthentificationException e) { 
            System.out.println("Expected exception: RepositoryAuthentificationException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking info...");
        org.sonar.plugins.modelbus.wsclient.repository.Session _info_sessionVal = null;
        javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session> _info_session = new javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session>(_info_sessionVal);
        java.lang.String _info_uri = "";
        long _info_revision = 0;
        javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Info> _info_info = new javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Info>();
        try {
            port.info(_info_session, _info_uri, _info_revision, _info_info);

            System.out.println("info._info_session=" + _info_session.value);
            System.out.println("info._info_info=" + _info_info.value);
        } catch (InvalidRevisionException e) { 
            System.out.println("Expected exception: InvalidRevisionException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryRuntimeException e) { 
            System.out.println("Expected exception: RepositoryRuntimeException has occurred.");
            System.out.println(e.toString());
        } catch (NonExistingResourceException e) { 
            System.out.println("Expected exception: NonExistingResourceException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryAuthentificationException e) { 
            System.out.println("Expected exception: RepositoryAuthentificationException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking getLogEntries...");
        org.sonar.plugins.modelbus.wsclient.repository.Session _getLogEntries_session = null;
        net.java.dev.jaxb.array.StringArray _getLogEntries_targetPaths = null;
        long _getLogEntries_startRevision = 0;
        long _getLogEntries_endRevision = 0;
        boolean _getLogEntries_changedPath = false;
        boolean _getLogEntries_strictNode = false;
        long _getLogEntries_limit = 0;
        boolean _getLogEntries_includeMergedRevisions = false;
        net.java.dev.jaxb.array.StringArray _getLogEntries_revisionProperties = null;
        try {
            org.sonar.plugins.modelbus.wsclient.repository.RepositoryLogEntryArray _getLogEntries__return = port.getLogEntries(_getLogEntries_session, _getLogEntries_targetPaths, _getLogEntries_startRevision, _getLogEntries_endRevision, _getLogEntries_changedPath, _getLogEntries_strictNode, _getLogEntries_limit, _getLogEntries_includeMergedRevisions, _getLogEntries_revisionProperties);
            System.out.println("getLogEntries.result=" + _getLogEntries__return);

        } catch (RepositoryRuntimeException e) { 
            System.out.println("Expected exception: RepositoryRuntimeException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryAuthentificationException e) { 
            System.out.println("Expected exception: RepositoryAuthentificationException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking getLocks...");
        org.sonar.plugins.modelbus.wsclient.repository.Session _getLocks_session = null;
        java.lang.String _getLocks_urlPrefix = "";
        try {
            org.sonar.plugins.modelbus.wsclient.repository.LockInfoArray _getLocks__return = port.getLocks(_getLocks_session, _getLocks_urlPrefix);
            System.out.println("getLocks.result=" + _getLocks__return);

        } catch (NonExistingResourceException e) { 
            System.out.println("Expected exception: NonExistingResourceException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryRuntimeException e) { 
            System.out.println("Expected exception: RepositoryRuntimeException has occurred.");
            System.out.println(e.toString());
        } catch (LockedException e) { 
            System.out.println("Expected exception: LockedException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryAuthentificationException e) { 
            System.out.println("Expected exception: RepositoryAuthentificationException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking exists...");
        org.sonar.plugins.modelbus.wsclient.repository.Session _exists_sessionVal = null;
        javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session> _exists_session = new javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Session>(_exists_sessionVal);
        java.lang.String _exists_uri = "";
        long _exists_revision = 0;
        javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Exists> _exists_exists = new javax.xml.ws.Holder<org.sonar.plugins.modelbus.wsclient.repository.Exists>();
        try {
            port.exists(_exists_session, _exists_uri, _exists_revision, _exists_exists);

            System.out.println("exists._exists_session=" + _exists_session.value);
            System.out.println("exists._exists_exists=" + _exists_exists.value);
        } catch (RepositoryRuntimeException e) { 
            System.out.println("Expected exception: RepositoryRuntimeException has occurred.");
            System.out.println(e.toString());
        } catch (NonExistingResourceException e) { 
            System.out.println("Expected exception: NonExistingResourceException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryAuthentificationException e) { 
            System.out.println("Expected exception: RepositoryAuthentificationException has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking copy...");
        org.sonar.plugins.modelbus.wsclient.repository.Session _copy_session = null;
        net.java.dev.jaxb.array.StringArray _copy_srcPaths = null;
        java.lang.String _copy_destPath = "";
        boolean _copy_isMove = false;
        boolean _copy_failWhenDstExists = false;
        java.lang.String _copy_logMessage = "";
        try {
            boolean _copy__return = port.copy(_copy_session, _copy_srcPaths, _copy_destPath, _copy_isMove, _copy_failWhenDstExists, _copy_logMessage);
            System.out.println("copy.result=" + _copy__return);

        } catch (RepositoryRuntimeException e) { 
            System.out.println("Expected exception: RepositoryRuntimeException has occurred.");
            System.out.println(e.toString());
        } catch (NonExistingResourceException e) { 
            System.out.println("Expected exception: NonExistingResourceException has occurred.");
            System.out.println(e.toString());
        } catch (RepositoryAuthentificationException e) { 
            System.out.println("Expected exception: RepositoryAuthentificationException has occurred.");
            System.out.println(e.toString());
        }
            }

        System.exit(0);
    }

}
